---
name: CI/CD

env:
  DATABASE_URL: psql://postgres:postgres@localhost:5432/wario
  DJANGO_SETTINGS_MODULE: config.settings.test
  REDIS_URL: redis://localhost:6379/
  CELERY_BROKER_URL: redis://localhost:6379/

  # Common Django Env
  DJANGO_ADMIN_URL: ""
  DJANGO_SECRET_KEY: placeholder-g7cLmscguS3fnxCPK2j12lc73j0vDAuUciazNxbl09AVj4dTtY
  DJANGO_AWS_ACCESS_KEY_ID: ""
  DJANGO_AWS_SECRET_ACCESS_KEY: ""
  DJANGO_AWS_STORAGE_BUCKET_NAME: ""

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Format
        run: |
          source .venv/bin/activate
          black --check $(git ls-files -- '*.py' ':!:**/migrations/*.py')

      - name: Sort imports
        run: |
          source .venv/bin/activate
          isort --check-only $(git ls-files -- '*.py' ':!:**/migrations/*.py')

      - name: Lint
        run: |
          source .venv/bin/activate
          pylint $(git ls-files -- '*.py' ':!:**/migrations/*.py')

  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'release'
    needs:
      - lint
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Publish release
        run: |
          poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
